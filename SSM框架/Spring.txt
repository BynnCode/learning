**Spring框架**
核心技术是IoC(控制反转)，aop(面向切面编程)：能实现模块之间、类之间的解耦和
特点：
	1、轻量，使用的jar包都比较小，运行占用的资源少，运行效率高，不依赖其他jar
	2、针对接口编程，解耦和：提供IoC控制反转，由容器管理对象、对象的依赖关系
	3、Aop编程的支持，方便进行切面的编程，通过声明式方法灵活进行事务管理，提高开发效率和质量
	4、方便集成各种优质框架（如Mybatis）：可以降低框架的使用难度，简化框架的使用
	
**IoC(Inversion of Control)：控制反转--> 是一个理论，概念，思想
	把对象的创建、赋值、管理工作都交给代码之外的容器实现，对象的创建是由其它外部资源完成的
	控制：创建对象，对象的属性赋值，对象之间的关系管理
	反转：将原来开发人员管理，创建对象的权限转移给代码之外的容器实现，由容器代替开发人员管理、创建对象，给属性赋值
	正转：开发人员在代码中，使用new构造方法创建对象，由开发人员主动管理对象
		public static void main(String args[]){
			Student student = new Student();	//代码中，创建对象（正转）
		}
		
	容器：是一个服务器软件，一个框架（例如spring）
	
	使用IoC的原因：目的是减少对代码的改动，实现不同的功能，实现解耦和（由容器管理对象时，能够不修改代码下，让对象拥有不同的功能），能够实现业务对象之间的解耦和，例如service和dao对象之间的解耦和，可以通过容器之间赋值类实现
	
java中创建对象：
	1、构造方法，new student()
	2、反射
	3、序列化（把对象保存在索引文件中）
	4、克隆
	5、动态代理
	6、IoC：容器创建对象
		IoC的实现（以Servlet举例）：
			1）创建类继承HttpServlet；
			2）在web.xml注册servlet，使用<servlet-name> myservlet <.servlet-name>
										 <servlet-class> com.power.controller.myServlet</servlet-class>
			
			3)没有创建Servlet对象，没有 MyServlet myservlet = new MyServlet();
			4)Servlet是Tomcat服务器能创建，Tomcat也称为容器
			  Tomcat作为容器，里面存放的有Servlet、Listener、Filter对象
			
			
IoC的技术实现：DI
	DI:(Dependency Injection):依赖注入，只需在程序中提供要使用的对象名称即可，对象如何在容器中查创建、赋值、查找都由容器内部实现
	
Spring是一个使用容器，管理对象，给属性赋值，DI实现了IoC的功能，底层创建对象，使用的是反射机制

什么样的对象放入容器中：
	1、dao类，service类、controller类，工具类(使用xml文件，使用<bean ; 注解)
	2、spring中的对象默认都是单例的，容器中叫该名的对象只有一个
不放入容器中的对象：
	1、实体类对象，实体类数据来自于数据库(可以放，但没意义)
	2、servlet，listener，filter等


Spring创建对象，实现ioc：
	1、创建maven对象
	2、加入maven依赖：spring的以来（5.2.5版本）、junit依赖
	3、创建类（接口和实现类），即普通的类
	4、创建spring需要使用的配置文件：声明类的信息(使用<bean>声明)，这些类由spring创建和管理
	5、测试spring创建对象（使用容器中的对象，使用ApplicationContext接口和实现ClassPathXmlApplicationContext的方法getBean()
	

	
Spring的配置文件
	<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

</beans>
		beans：根标签，spring把java对象称为bean
		spring-beans.xsd是约束文件，和mybatis指定dtd一样
		
	<bean id="someService" class="com.power.service.impl.SomeServiceImpl" />
	声明bean。创建某个类的对象
    id：对象的自定义名称，唯一值，spring通过id找到对象
    class：类的全限定名称（不能接口，spring是反射机制创建对象，必须使用类）
    spring 内部完成：
         SomeService someService = new SomeServiceImpl();
        spring 将创建好的对象放入到map中，spring框架中有一个map存放对象的
            springMap.put(id,对象）
            eg:springMap.put("someService",new SomeServiceImpl());
         一个bean标签声明一个对象
		 
	Spring默认创建对象的时间：在创建Spring的容器时，会创建配置文件中的所有对象
	
**di:依赖注入，表示创建对象，给属性赋值	
实现语法有两种：1、在spring配置文件中，使用标签和属性完成，叫基于xml的di实现
				2、使用spring中的注解，完成属性赋值，叫基于注解的id实现
di的语法分类：
	1、set注入（设置注入）：spring调用类的set方法，在set方法可以实现属性的赋值（广泛使用）
	2、构造注入，spring调用类的有参数构造方法，创建对象，在构造方法中完成赋值
	引用类型的自动注入（对简单类型无效）：spring框架根据某些规则可以给引用类型赋值
			1、byName:按名称注入，java类中引用类型的属性名和spring容器中（配置文件）<bean>的id名称一样，且数据类型是一致的，这样的容器中的bean，spring能够赋值给引用类型
			 语法：<bean id="" class="" autowire="byName">
					  简单类型属性赋值
				  </bean>
			 2、byType：(按类型注入）java类中引用类型的数据类型和spring容器中（配置文件）<bean>的class属性是同源关系的，该bean能够赋值给引用类型
					同源：
						1、java类中引用类型的数据类型和class的值是一样的
						2、java类中引用类型的数据类型和bean的class的值父子类关系
						3、java类中引用类型的数据类型和bean的class的值是接口和实现类关系
			 语法；    <bean id="" class="" autowire="byType">
					  简单类型属性赋值
					  </bean>
					  注：byType中，在xml配置文件中声明bean只能有一个符合条件的，不能多余

多配置文件：
	优势：1、每个文件大小要比一个总文件小很多，效率高
		  2、避免多人竞争带来的冲突
	多文件分配方式：
		1）按功能模块：一个模块一个配置文件
		2）按类的功能，数据库相关配置一个配置文件，做事务的一个配置文件，做service的一个配置文件等
		
**基于注解的di：通过注解完成java对象创建、属性赋值
	使用注解的步骤：
	1、加入maven的依赖spring-context，在加入spring-context同时，间接加热spring-aop的依赖
	   使用注解必须使用spring-aop依赖
	2、在类中加入spring的注解（不同功能的注解）
	3、在spring的配置文件中，加入一个组件扫描器的标签，表明注解在项目中的位置
	4、使用注解创建对象，创建容器ApplicationContext
	
	指定多个包的三种方式：
		1、使用多次组件扫描器，指定不同的包
		2、使用分隔符（；或，）分隔多个包名
		3、指定父包
	
	注解类型：
		@Component：:创建对象，等同于<bean>的功能
		
		@Respotory：用在持久层类的上面，放在dao的实现类上面，表示创建dao对象，dao对象能访问数据库
		@Service：用在业务层类的上面，放在service的实现类上面，创建service对象，service对象做业务处理，有事务等功能
		@Controller：用在控制器上面，放在控制器类上面，创建控制器对象，能够接受用户提交的参数，现实请求的处理结果
		注：以上三个注解的使用语法和@Component一样，都能创建对象，但这三个注解还有额外的功能，主要是给项目的对象分层的
		
		@Value：简单类型的属性赋值
		@Autowired：spring框架提供的注解，实现引用类型的赋值，原理是自动注入，支持byName和byType，默认使用的是byType自动注入
		@Resource：JDK注解，Spring提供该注解的功能支持，可以给引用类赋值，使用的也是自动注入原理，支持byName和byType，默认使用的是byName自动注入
		

配置文件和注解：注解为主，配置文件为辅 

动态代理：在程序的执行过程中，创建代理对象：通过代理对象执行方法，给目标类的方法增加额外功能
		  使得程序更加专注于业务
	作用：
		1、在目标源代码不改变的情况下，增加功能
		2、减少代码的重复性
		3、专注业务逻辑代码
		4、解耦和，让业务功能和日志、事务非业务功能分离
		  
**JDK动态代理实现步骤：
	1、创建目标类，SomeServiceImpl目标类，给doSome、doOther增加输出时间和事务
	2、创建InnocationHandler接口的实现类，给目标方法增加功能
	3、使用JDK中类Proxy，创建代理对象，实现创建对象的能力
**CGLIB动态代理：
	第三方的工具库，创建代理对象，原理是继承。通过继承目标类，继承子类。
	子类就是代理对象，要求目标类不能是final，方法也不能使final
	



****AOP*****（Aspect Oriented Programming -- 面向切面编程）
	AOP底层就是动态代理，采用两种代理：JDK的动态代理和CGLib的动态代理
	AOP是动态代理的规范化，将动态代理的实现步骤、方式都定义好，让开发人员用一种统一的方式使用动态代理
	作用：
		1、在目标类不修改源代码的情况下，增加功能
		2、减少重复的代码
		3、专注业务功能的实现
		4、解耦和：业务功能和日志、事务这些非业务功能的耦合
		
	什么时候应该使用AOP技术：
		1、当要给一个系统中存在的类修改功能，但原有类的功能不完善，且有源代码，使用aop增加功能，对原先功能进行补充
		2、要给项目中的多个类，增加一个相同的功能，使用AOP
		
	
	Aspect：切面，增加增强的功能，类似日志、事务、统计信息、参数检查、权限验证等，基本上是非业务方法，独立使用
	Oriented 面向
	Programming	编程
	JoinPoint：连接点，连接业务方法和切面的位置，即某类中的业务方法（可以在通知方法中获取方法执行时的信息，例如方法名称或实参）。JointPoint中参数的值是由框架赋予，且必须是第一个位置的参数
	Pointcut：切入点，指多个连接点方法的集合，即多个方法；是一个或多个JoinPoint的集合，表示切面功能执行的位置
	目标对象：给哪个类的方法增加功能，该类就是目标对象
	Advice：通知（增强），表示切面功能执行的时间，在方法前或方法后
	
	oop：面向对象编程（不考虑过程，只关注具体的对象能够完成什么功能，将事务抽象成一个个单独的个体“类”来实现。项目是由众多类组成的，研究类之中有什么方法、属性，类和类之间有什么关系。
		特点：封装、继承、多态 	
	
	怎样理解面向切面编程？
		1）分析项目功能使，需找到切面
		2）合理安排切面的执行时间（在目标方法前还是后）
		3）合理安排切面执行的位置，在哪个类，哪个方法中增加增强功能

	切面的三个关键要素：
	1）切面的功能代码，切面用来干什么
	2）切面的执行位置，使用Pointcut表示切面执行的位置
	3）切面的执行时间，使用advice表示时间，在目标方法之前还是后

AOP的实现：（即对动态代理的规范化、标准化）
	技术实现框架：1）spring，内部实现了AOP规范，在事务处理时使用aop，但很少使用spring的aop实现
				  2）aspectJ：一个开源的专门做AOP框架（来自于Eclipse），在spring中已经集成
					 aspectJ使用的两种方式：1、使用xml的配置文件：配置全局事务（使用xml配置文件的标签）
											2、使用注解，在项目中药做aop功能，一般都使用注解，aspectJ有5个注解
		aspectJ框架的使用：
			1）切面的执行时间，在规范中叫做advice（通知/增强）：在aspectJ框架中使用注解表示：
				@Before：前置通知，表示切面的执行时间，使用的通知注解，在目标方法前先执行切面的功能
				@AfterReturning：后置通知，在目标方法之后执行，能够获取到目标方法的返回值
				@Around ：环绕通知，在目标方法前和后都能增强gonna，控制目标方法的访问，修改返回值。环绕通知一般做事务，在目标方法前开启事务，执行目标方法，在目标方法后提交事务
				@AfterThrowing：异常通知，在目标方法抛出异常后执行的通知
				@After：最终通知，总是会被执行的代码
				@Pointcut：定义和管理切入点的辅助注解
			2）表示切面执行的位置，使用的是切入点表达式
			
	代理的使用方式：
		1、目标类有接口，框架使用jdk动态代理
		2、目标类没有接口，默认使用的cglib动态代理
		3、有借口也可以强制使用cglib动态代理

AspectJ框架实现aop的步骤：
	1、新建maven项目
	2、加入依赖：maven依赖、aspectJ依赖、junit依赖
	3、创建目标类：接口和实现类，给类中的方法增加功能
	4、创建切面类：普通类******
		1）在类上方加入@Aspect
		2）在类中定义方法，方法就是切面要执行的功能代码：在方法的上方加入aspectJ的通知注解，例如@Before，需要指定切入点表达式execution()
			注：方法的定义要求：
				1）公共方法public
				2）方法没有返回值
				3）方法名称自定义
				4）方法可以有参数，也可以没有参数，参数不是自定义的，有几个参数类型可以使用
	5、创建spring的配置文件：声明对象，把对象交给容器统一管理，声名对象可以使用注解或xml配置文件<bean>************
		1) 声明目标对象
		2）声明切面类对象
		3）声明aspectJ框架中的自动代理生成器标签（自动代理生成器：用来完成代理对象的自动创建功能的）
	6、创建测试类，从spring容器中获取目标对象（即代理对象）：通过代理执行方法，实现aop的功能增强
	


**将mybatis和Spring集成在一起，用到的技术是IoC：即将mybatis框架中的对象交给spring统一创建，开发人员从spring中获取对象，开发人员不用同时面对几个框架，只需面对一个spring
->mybatis使用步骤<-
	1、定义dao接口：StudentDao
	2、定义mapper文件：StudentDao.xmlns
	3、定义mybatis的主配置文件 mybatis.xml
	4、创建dao的代理对象：StudentDao dao = SqlSession.getMapper(StudentDao.class);
	5、List<Student> students = dao.selectStudents();
使用dao对象，需要使用getMapper()方法：
	1、获取SqlSession对象，需要使用SqlSessionFactory的openSession()方法
	2、创建SqlSessionFactory对象，通过读取Mybatis的主配置文件，能创建SqlSessionFactory对象
即：需要SqlSessionFactory对象，使用Factory能获取SqlSession，有了SqlSession就拿有dao，目的就是获取dao对象
	主配置文件：
	(1)数据库信息
	<environments default="mydev">
        <!--        一个数据库信息的配置，环境-->
        <environment id="mydev">
            <!--            mybatis的事物类型-->
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/power"/>
                <property name="username" value="root"/>
                <property name="password" value="abcd"/>
            </dataSource>
        </environment>
    </environments>
	(2)mapper文件的位置
	<mappers>
        <mapper resource="com/power/dao/studentDao.xml"/>
    </mappers>
	
将使用独立的连接池类替换mybatis自带的，将连接池交给spring创建
===================================================================
spring创建以下对象：
	1、独立的连接池类的对象，使用阿里的druid连接池
	2、SqlSessionFactory对象
	3、创建dao对象
	
	
	
	
	
	
	
=========================================================
Spring的事务处理
1、什么是事务：
	事务是指一组sql语句的集合，集合中有多条sql语句，可能是select、update、insert、delete，这些sql的执行是一致的，作为一个整体执行
	
2、什么时候要使用事务
	当操作设计到多个表，或多个sql语句的insert、、insert、delete，需要保证这些语句都成功才能完成我的功能，保证操作符合要求
	在java代码中控制事务，事务应该放在service业务方法上，业务方法会调用多个dao方法，执行多个sql语句

3、jdbc访问数据库处理事务：Connection conn ; conn.commit(); conn.rollback();
   mybatis访问数据库处理事务: SqlSession.commit(); SqlSession.rollback();
   Hibernate访问数据库处理事务：Session.commit();Session.rollback();
   
4、上述处理事务的方式的不足：
	1）不同的数据库访问技术，处理事务的对象、方法不同，需要了解不同数据库访问技术使用事务的原理
	2）掌握多种数据库中事务的处理逻辑：什么时候提交事务、什么时候回顾事务
	3）处理事务的多种方法。
	综上，多个数据库的访问计数，有不同的事务处理机制、对象、方法
	
5、Spring解决以上不足：
	Spring提供一种处理事务的统一模型，能使用统一步骤或方式完成多种数据库访问技术的事务处理
	
6、处理事务怎么做，做什么：
	spring处理事务的模型、使用的步骤都是固定的，将事务使用的信息提供给spring即可
	1）事务内部提交，回滚事务，使用的事务管理器对象，代替完成commit、rollback
	2）业务需要的事务类型：
		（1）事务的隔离级别，有四个值
		（2）事务的超时时间：表示一个方法最长的执行时间，若方法超过该时间，事务就会回滚
		（3）事务的传播行为：控制业务方法是否有事务，是什么样的事务，有7个传播行为，表名业务方法调用时，事务在方法之间是如何使用的
	3）事务提交事务、回滚事务的时机
		（1）业务方法执行成功 ，无异常抛出，当方法执行完毕，spring在方法执行后提交事务，事务管理器commit
		（2）业务方法抛出运行异常，spring执行回滚，调用事务管理器的rollback
		（3）业务方法抛出非运行异常，主要是受查异常（写代码时，必须处理的异常，例如IOException、SQLException）时提交事务
		
综上，Spring的事务：
	1、管理事务的是事务管理和实现类
	2、spring的事务是一个统一模型
		1）指定使用的事务管理器实现类，使用<bean>
		2）指定哪些类，哪些方法需要加入事务的功能
		3）指定方法需要的隔离级别、传播行为、超时时间等
		
		
Spring框架中提供的事务处理方案：
	1、适合中小项目使用的注解方案：spring框架用aop实现给业务方法增加事务的功能，使用@Transactional注解增加事务
		@Transactional注解是Spring框架自己的注解，放在public方法上，表示当前方法具有事务，可以给注解的属性赋值，表示具体的隔离级别，传播行为、异常信息等
		
	2、使用@Transactional注解的步骤：
		1）需要声明事务管理器对象：<bean id ="xx" class="DataSourceTransactionManager">
		2)开启事务注解驱动，告知spring框架要使用注解方式管理事务：spring使用aop机制，创建@Transactional所在的类代理对象，给方法加入事务的功能
			在业务方法执行之前，先开启事务，在业务方法后提交或回滚事务，使用aop的环绕通知
		3）在方法上面加入@Transactional
		
	3、适合大型项目，使用aspectj框架功能，在spring配置文件中声明类、方法所需要的事务，该方法和事务配置需完全分离
		实现步骤（都是在xml配置文件中实现）：
		1）要使用的是aspectj框架，需要加入依赖
		2）声明事务管理器对象
		3）声明方法需要的事务类型（配置方法的事务属性（隔离级别、传播行为、超时））
		4）配置aop：指定要创建代理的类